/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author c4-edmunds
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Clear");
        jButton1.setToolTipText("");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Verify ISBN");
        jButton2.setToolTipText("");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jTextField1.setText("Welcome");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Welcome");
        jScrollPane1.setViewportView(jTextArea1);

        jButton3.setText("Verify Card");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setText("Encode");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jButton5.setText("Decode");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jButton6.setText("SHA-1");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        jButton7.setText("Brute Force");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jTextField1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton7)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(8, 8, 8)
                        .addComponent(jButton5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

public void verifyISBN() {
    int[] d = new int[10];
    String s;
    s = jTextField1.getText();
    int sLength = s.length();
    int modNum = 0;
    
    for (int i = 0; i < sLength; i++){
        
        if (String.valueOf(s.charAt(i)).equals("X"))
        {
        d[i] = 10;
        }
        else 
        {
        d[i] = Integer.parseInt(String.valueOf(s.charAt(i)));            
                    
        }
        
    }
    
    modNum = (d[0]+2*d[1]+3*d[2]+4*d[3]+5*d[4]+6*d[5]+7*d[6]+8*d[7]+9*d[8]+10*d[9])%11;
    
    if (modNum == 0){
        jTextArea1.setText("Verified!");
    }
        else{
        jTextArea1.setText("Not verified ;_;");
    };
  }

public void verifyCreditCard() {
    String s;
    s = jTextField1.getText();
    int[] cardNum = new int[s.length()];
    int sLength = s.length();

    for (int i = 0; i < sLength; i++)
    {
        cardNum[i] = Integer.parseInt(String.valueOf(s.charAt(i)));                         
    }
    // int i = 0; i < 5; i++
    // cardNum.length
    for (int i = 0; i < cardNum.length - 1; i = i + 2)
    {
        //cardNum[i] = Integer.parseInt(String.valueOf(s.charAt(i)));

        int tempValue = cardNum[i];
        tempValue = tempValue *2;
        if (tempValue > 9)
        {
            //tempValue = tempValue % 10 +1;
            tempValue = tempValue - 9;
        }
        cardNum[i] = tempValue;    
    }

//        int total = 0;
//        for (int i = 0; i < cardNum.length; i++)
//        {
//            total += cardNum[i];
//        }
    int total;
    total = (cardNum[0]+cardNum[1]+cardNum[2]+cardNum[3]+cardNum[4]+cardNum[5]+cardNum[6]+cardNum[7]+cardNum[8]+cardNum[9]+cardNum[10]+cardNum[11]+cardNum[12]+cardNum[13]+cardNum[14]+cardNum[15]);

    if  (total % 10 == 0)
    {
        jTextArea1.setText("Verified credit card!");
    }
    else
    {
        jTextArea1.setText("bad card");
    }

//modNum = ((d[0])+(2*d[1])+(d[2])+(2*d[3])+(d[4])+(2*d[5])+(d[6]))%11;
//   do it this way >  https://niiconsulting.com/checkmate/wp-content/uploads/2015/03/Luhn-Algorithm.png   
}

public void verifyMod11() {

    String input;
    input = jTextField1.getText();
    int inputLength = input.length();
    int modNum = 0;
    int[] mod11Digits = new int[input.length()];
    
    int d7 = 0;
    int d8 = 0;
    int d9 = 0;
    int d10 = 0;
    

    
    for (int i = 0; i < inputLength; i++){
        
        if (String.valueOf(input.charAt(i)).equals("X"))
        {
        //d[i] = 10;
        }
        else 
        {
        mod11Digits[i] = Integer.parseInt(String.valueOf(input.charAt(i)));            
                    
        }
        
    }
    
    d7 = (4 * mod11Digits[0] + 10 * mod11Digits[1] + 9 * mod11Digits[2] + 2 * mod11Digits[3] + mod11Digits[4] + 7 * mod11Digits[5])%11;
    d8 = (7 * mod11Digits[0] + 8 * mod11Digits[1] + 7 * mod11Digits[2] + mod11Digits[3] + 9 * mod11Digits[4] + 6 * mod11Digits[5])%11;
    d9 = (9 * mod11Digits[0] + mod11Digits[1] + 7 * mod11Digits[2] + 8 * mod11Digits[3] + 7 * mod11Digits[4] + 7 * mod11Digits[5])%11;
    d10 = (mod11Digits[0] + 2 * mod11Digits[1] + 9 * mod11Digits[2] + 10 * mod11Digits[3] + 4 * mod11Digits[4] + mod11Digits[5])%11;
    
    if  (d7 == 10 || d8 == 10 || d9 == 10 || d10 == 10)
    {
        jTextArea1.setText(input + d7 + d8 + d9+ d10 + "\nBad Number ;_;");
    }
    else
    {
        jTextArea1.setText(input + d7 + d8 + d9+ d10 + "\nGood Number ^_^");
    }
    
}
public int SquareRoot(int SquaredRoot) {
    
    switch (SquaredRoot) 
    {
        case 1 -> SquaredRoot = 1;
        case 2 -> SquaredRoot = 100;
        case 3 -> SquaredRoot = 5;
        case 4 -> SquaredRoot = 2;
        case 5 -> SquaredRoot = 4;
        case 6 -> SquaredRoot = 100;
        case 7 -> SquaredRoot = 100;
        case 8 -> SquaredRoot = 100;
        case 9 -> SquaredRoot = 3;
        case 10 -> SquaredRoot = 100;
    }
    return SquaredRoot;
}

public int Squared(int Squared) {
    
    switch (Squared) 
    {
        case 1 -> Squared = 1;
        case 2 -> Squared = 4;
        case 3 -> Squared = 9;
        case 4 -> Squared = 5;
        case 5 -> Squared = 3;
        case 6 -> Squared = 3;
        case 7 -> Squared = 5;
        case 8 -> Squared = 9;
        case 9 -> Squared = 4;
        case 10 -> Squared = 1;
    }
    return Squared;
}

public int Xminus(int Minused) {
    
    switch (Minused) 
    {
        case 1 -> Minused = 10;
        case 2 -> Minused = 9;
        case 3 -> Minused = 8;
        case 4 -> Minused = 7;
        case 5 -> Minused = 6;
        case 6 -> Minused = 5;
        case 7 -> Minused = 4;
        case 8 -> Minused = 3;
        case 9 -> Minused = 2;
        case 10 -> Minused = 1;
    }
    return Minused;
}

public int Inverse(int Inverted) {
    
    switch (Inverted) 
    {
        case 1 -> Inverted = 1;
        case 2 -> Inverted = 6;
        case 3 -> Inverted = 4;
        case 4 -> Inverted = 3;
        case 5 -> Inverted = 9;
        case 6 -> Inverted = 2;
        case 7 -> Inverted = 8;
        case 8 -> Inverted = 7;
        case 9 -> Inverted = 5;
        case 10 -> Inverted = 10;
    }
    return Inverted;
}

public int Mod11(int Modulus11) {
    
    while (Modulus11 < 0)
    {
        Modulus11 = Modulus11 + 11;
    }
    while (Modulus11 > 10)
    {
        Modulus11 = Modulus11 - 11;   
    }
          
    return Modulus11;
}

public void Decode() {
    
    String input;
    input = jTextField1.getText();
    int inputLength = input.length();
    int modNum = 0;
    int[] decodeDigits = new int[input.length()];
    
    for (int i = 0; i < inputLength; i++)
    {
        decodeDigits[i] = Integer.parseInt(String.valueOf(input.charAt(i)));                                
    }
    
    int d7 = decodeDigits[6];
    int d8 = decodeDigits[7];
    int d9 = decodeDigits[8];
    int d10 = decodeDigits[9];
    
    int syndrome1 = 0;
    int syndrome2 = 0;
    int syndrome3 = 0;
    int syndrome4 = 0;
    
    int P = 0;
    int Q = 0;
    int R = 0;
    
    int errorMagnitude1 = 0;
    int errorMagnitude2 = 0;
    int errorPosition1 = 0;
    int errorPosition2 = 0;
   
    
    syndrome1 = Mod11(decodeDigits[0]+decodeDigits[1]+decodeDigits[2]+decodeDigits[3]+decodeDigits[4]+decodeDigits[5]+decodeDigits[6]+decodeDigits[7]+decodeDigits[8]+decodeDigits[9]);
    System.out.println(syndrome1);
    syndrome2 = Mod11(decodeDigits[0]+2*decodeDigits[1]+3*decodeDigits[2]+4*decodeDigits[3]+5*decodeDigits[4]+6*decodeDigits[5]+7*decodeDigits[6]+8*decodeDigits[7]+9*decodeDigits[8]+10*decodeDigits[9]);
    System.out.println(syndrome2);
    syndrome3 = Mod11(decodeDigits[0]+4*decodeDigits[1]+9*decodeDigits[2]+5*decodeDigits[3]+3*decodeDigits[4]+3*decodeDigits[5]+5*decodeDigits[6]+9*decodeDigits[7]+4*decodeDigits[8]+decodeDigits[9]);
    System.out.println(syndrome3);
    syndrome4 = Mod11(decodeDigits[0]+8*decodeDigits[1]+5*decodeDigits[2]+9*decodeDigits[3]+4*decodeDigits[4]+7*decodeDigits[5]+2*decodeDigits[6]+6*decodeDigits[7]+3*decodeDigits[8]+10*decodeDigits[9]);
    System.out.println(syndrome4);
    
    P = Mod11((syndrome2 * syndrome2) - (syndrome1 * syndrome3));
    System.out.println("P" + P);
    Q = Mod11((syndrome1 * syndrome4) - (syndrome2 * syndrome3));
    System.out.println("Q" + Q);
    R = Mod11((syndrome3 * syndrome3) - (syndrome2 * syndrome4));
    System.out.println("R" + R);
    
//    jTextArea1.setText(Integer.toString(SquareRoot(3)));
    
    if (syndrome1 == 0 && syndrome2 == 0 && syndrome3 == 0 && syndrome4 == 0)
        {
        jTextArea1.setText("No Errors ^_^");
        }
    else if (syndrome1 != 0 || syndrome2 != 0 || syndrome3 != 0 || syndrome4 != 0)
        { 
            if (P == 0 && Q == 0 && R == 0)
            {
                errorMagnitude1 = syndrome1;
                errorPosition1 = Mod11(syndrome2 * Inverse(syndrome1));
                
                for (int i = 0; i < inputLength; i++)
                {
                    if (i == (errorPosition1 - 1) && errorPosition1 != 0)
                    {
                        decodeDigits[i] = (decodeDigits[i] - errorMagnitude1);
                        
                        if (decodeDigits[i] < 0)
                        {
                            decodeDigits[i] = 10 + decodeDigits[i];  
                        }
                        
                    }
                                                    
                }
                
                if ( errorPosition1 != 0)
                {
                    jTextArea1.setText("There's a single error ;_; \nits at " + errorPosition1 + "\nMagnitude " + errorMagnitude1 + "\nOutput: " 
                    + decodeDigits[0] + decodeDigits[1] + decodeDigits[2] + decodeDigits[3] + decodeDigits[4] + decodeDigits[5] + decodeDigits[6] + decodeDigits[7] + decodeDigits[8] + decodeDigits[9] );    
                }
                else
                {
                    jTextArea1.setText("Triple Error!!!");    
                }
                
            }
            else if (P != 0 || Q != 0 || R != 0)
            {
                errorPosition1 = (Mod11((- Q + SquareRoot(Mod11((Q*Q) - 4 * P * R))) * Inverse(Mod11(P*2))));
                errorPosition2 = (Mod11((- Q - SquareRoot(Mod11((Q*Q) - 4 * P * R))) * Inverse(Mod11(P*2))));
                errorMagnitude2 = (Mod11((errorPosition1 * syndrome1 - syndrome2) * Inverse(Mod11(errorPosition1 - errorPosition2))));
                errorMagnitude1 = (Mod11(syndrome1 - errorMagnitude2));
                
                if (errorPosition1 == 0 || errorPosition2 == 0 || (SquareRoot(Mod11((Q*Q) - 4 * P * R))) == 100)
                {
                    jTextArea1.setText("Triple Error!!!");    
                }
                else if (errorPosition1 != 10 && errorPosition2 != 10)
                {
                    
                    for (int i = 0; i < inputLength; i++)
                    {
                        if (i == (errorPosition1 - 1) && errorPosition1 != 0)
                        {
                            decodeDigits[i] = (decodeDigits[i] - errorMagnitude1);

                            if (decodeDigits[i] < 0)
                            {
                                decodeDigits[i] = 11 + decodeDigits[i];  
                            } 
                        }
                        else if (i == (errorPosition2 - 1) && errorPosition2 != 0)
                        {
                            decodeDigits[i] = (decodeDigits[i] - errorMagnitude2);

                            if (decodeDigits[i] < 0)
                            {
                                decodeDigits[i] = 11 + decodeDigits[i];  
                            }            
                        }
                    }

                    
                    
                    jTextArea1.setText("Multiple Errors! D:\n" + "Error 1 position:" + errorPosition1 + " Error 1 Magnitude: " + errorMagnitude1 + "\nError 2 position: " + errorPosition2 + " Error 2 Magnitude: " + errorMagnitude2 + "\nOutput: " +
                    decodeDigits[0] + decodeDigits[1] + decodeDigits[2] + decodeDigits[3] + decodeDigits[4] + decodeDigits[5] + decodeDigits[6] + decodeDigits[7] + decodeDigits[8] + decodeDigits[9]);
                }
                else
                {
                jTextArea1.setText("Triple Error!!!");
                }
            }
            else
            {
                jTextArea1.setText("Triple Error!!!");
            }
        }
    //WHEN DOING ANY SQUARING OR DIVIDING USE THE CHART
    //MOD11 EVERYTHING ***EVERYTHING***
    //MOD11 DOESN'T LOOP WITH NEGATIVE NUMBERS YOU NEED TO ADD A LOOP
    //DOESN'T NEED TO CORRECT TRIPLE ERRORS, JUST NEEDS TO BE ABLE TO RECOGNISE THEM AND SAY THE NUM OF ERRORS
    
}

public void SHA1Generate()
{
    
}

public void SHA1BruteForce()
{
    
}    
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        jTextField1.setText("");
        jTextArea1.setText("");

    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
    
        int checksumvalue = 0;
        String emptyCheck = jTextField1.getText();
        if (emptyCheck.isEmpty() == true){
            jTextArea1.setText("You havent put anything :(");
        }
        else{
            
            verifyISBN();
            
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        verifyCreditCard();
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        verifyMod11();
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        Decode();
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        SHA1Generate();
    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        SHA1BruteForce();
    }//GEN-LAST:event_jButton7MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
